#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

void add_to_team(vector<int> &team, int val)
{
        bool add = false;
        for (auto &fighter : team)
        {
                if (fighter < val)
                {
                        add = true;
                }
                else
                {
                        add = false;
                }
        }
        if (add)
                team.push_back(val);
}

int find_winner(pair<int, vector<int>> x, pair<int, vector<int>> y)
{
        // sort their individual strength
        sort(x.second.begin(), x.second.end());
        sort(y.second.begin(), y.second.end());
        // create an alternating attack variables
        pair<int, vector<int>> current_attacker = x;
        pair<int, vector<int>> defending_team = y;
        while (current_attacker.second.size() != 0) // the attacker size is not 0
        {
                cout << "current attacker length" << current_attacker.second.size() << endl;
                int current_fighter = current_attacker.second[current_attacker.second.size() - 1]; // pick from the back in desending order

                for (int s = 1; s <= current_fighter; s++) // chosen fighter chooses at most (current_fighter)fighters from other team
                {
                        auto found_itr = find(defending_team.second.begin(), defending_team.second.end(), s);
                        if (found_itr != defending_team.second.end())
                        {
                                defending_team.second.erase(found_itr);
                                cout << "current fighter :TEAM-" << current_attacker.first << " kills" << s << endl;
                        }
                        else
                        {
                                continue;
                        }
                }
                cout << " ===============0000=================" << endl;
                if (defending_team.second.size() == 0)
                        break;
                if (current_attacker.second.size() == 0)
                        break;
                if (current_attacker.first == x.first)
                {
                        swap(current_attacker, defending_team);
                        continue;
                }
                if (current_attacker.first == y.first)
                {
                        swap(current_attacker, defending_team);
                        continue;
                }
        }
        return (current_attacker.second.size() > defending_team.second.size()) ? current_attacker.first : defending_team.first;
}

vector<int> fightingPits(int k, vector<vector<int>> fighters, vector<vector<int>> queries)
{
        //queries -> {{},{}}
        vector<int> res;
        unordered_map<int, vector<int>> teams_strength;
        int len_of_fighters = fighters.size();
        for (int i = 0; i < len_of_fighters; i++)
        {
                int key = fighters[i][1];
                if (teams_strength.find(key) == teams_strength.end())
                        teams_strength[fighters[i][1]] = vector<int>();
                teams_strength[fighters[i][1]].push_back(fighters[i][0]); // {1:{1,2,1,2,4}} eg for each team
        }

        int len_of_queries = queries.size();
        for (int i = 0; i < len_of_queries; i++)
        {
                if (queries[i][0] == 1)
                        add_to_team(teams_strength[queries[i][2]], queries[i][1]);
                if (queries[i][0] == 2)
                {
                        auto x = teams_strength.find(queries[i][1]);
                        if (x == teams_strength.end())
                        {
                                res.push_back(0);
                                continue;
                        }
                        auto y = teams_strength.find(queries[i][2]);
                        if (y == teams_strength.end())
                        {
                                res.push_back(0);
                                continue;
                        }
                        int v = find_winner(*x, *y);
                        res.push_back(v);
                }
        }

        return res;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nkq_temp;
    getline(cin, nkq_temp);

    vector<string> nkq = split_string(nkq_temp);

    int n = stoi(nkq[0]);

    int k = stoi(nkq[1]);

    int q = stoi(nkq[2]);

    vector<vector<int>> fighters(n);
    for (int fighters_row_itr = 0; fighters_row_itr < n; fighters_row_itr++) {
        fighters[fighters_row_itr].resize(2);

        for (int fighters_column_itr = 0; fighters_column_itr < 2; fighters_column_itr++) {
            cin >> fighters[fighters_row_itr][fighters_column_itr];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    vector<vector<int>> queries(q);
    for (int queries_row_itr = 0; queries_row_itr < q; queries_row_itr++) {
        queries[queries_row_itr].resize(3);

        for (int queries_column_itr = 0; queries_column_itr < 3; queries_column_itr++) {
            cin >> queries[queries_row_itr][queries_column_itr];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    vector<int> result = fightingPits(k, fighters, queries);

    for (int result_itr = 0; result_itr < result.size(); result_itr++) {
        fout << result[result_itr];

        if (result_itr != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
